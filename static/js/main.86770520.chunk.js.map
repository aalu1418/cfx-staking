{"version":3,"sources":["assets/cfx_logo.jpg","assets/blockchain.js","stakeMenu/stakeMenu.js","nav/nav.js","alert/alert.js","App.js","reportWebVitals.js","index.js"],"names":["Conflux","require","util","abi","contract","Contract","address","checkBalance","provider","userAddress","a","tx","getStakingBalance","send","to","data","balance","drip","format","bigInt","unit","fromDripToCFX","console","log","sendTransaction","type","amountCFX","fromCFXToDrip","from","window","conflux","selectedAddress","gas","receipt","undefined","StakeMenu","connected","setTx","chainID","React","useState","deposit","setDeposit","value","setValue","setBalance","disabled","setDisabled","refresh","triggerRefresh","useEffect","Number","then","res","String","buttonClick","className","placeholder","onChange","event","newValue","target","src","logo","alt","onClick","Nav","installed","setInstalled","setAddress","handleClick","open","enable","account","set","Alert","warn","active","setActive","setTimeout","prev","clear","class","href","networkVersion","App","setChainID","on","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.86770520.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/cfx_logo.1c4567c4.jpg\";","const { Conflux } = require(\"js-conflux-sdk\");\nconst util = require(\"js-conflux-sdk/src/util\");\nconst abi = require(\"./abi.json\");\nconst address = \"0x0888000000000000000000000000000000000002\";\n\nconst cfx = new Conflux();\nconst contract = cfx.Contract({\n  abi,\n  address,\n});\n\nexport const checkBalance = async (provider, userAddress) => {\n  const tx = contract.getStakingBalance(userAddress);\n  try {\n    const balance = await provider.send(\"cfx_call\", [\n      { to: contract.address, data: tx.data },\n    ]);\n    const drip = util.format.bigInt(balance);\n    return util.unit.fromDripToCFX(drip);\n  } catch (e) {\n    console.log(\"checkBalance: \", e);\n    return 0;\n  }\n};\n\nexport const sendTransaction = async (provider, type, amountCFX) => {\n  const tx = contract[type](util.unit.fromCFXToDrip(amountCFX));\n  console.log(tx);\n  try {\n    const receipt = await provider.send(\"cfx_sendTransaction\", [\n      {\n        to: contract.address,\n        data: tx.data,\n        from: window.conflux.selectedAddress,\n        gas: \"21000\"\n      },\n    ]);\n    return receipt;\n  } catch (e) {\n    console.log(\"sendTransaction: \", e);\n    return undefined;\n  }\n};\n","import React from \"react\";\nimport \"./stakeMenu.css\";\nimport logo from \"../assets/cfx_logo.jpg\";\nimport { checkBalance, sendTransaction } from \"../assets/blockchain\";\n\nconst StakeMenu = ({ connected, setTx, chainID }) => {\n  const [deposit, setDeposit] = React.useState(true);\n  const [value, setValue] = React.useState(\"\");\n  const [balance, setBalance] = React.useState(\"0.0\");\n  const [disabled, setDisabled] = React.useState(true);\n  const [refresh, triggerRefresh] = React.useState(false);\n\n  const filterValue = (event) => {\n    const newValue = event.target.value;\n    setValue(\n      !!Number(newValue) ||\n        newValue === \"0.\" ||\n        newValue === \"\" ||\n        newValue === \"0\"\n        ? newValue\n        : value\n    );\n  };\n\n  React.useEffect(() => {\n    setDisabled(Number(value) <= 0);\n  }, [value]);\n\n  React.useEffect(() => {\n    if (connected.value) {\n      checkBalance(window.conflux, window.conflux.selectedAddress).then((res) =>\n        setBalance(String(res))\n      );\n    }\n  }, [connected.value, refresh, chainID]);\n\n  const buttonClick = async () => {\n    setDisabled(true);\n    const receipt = await sendTransaction(\n      window.conflux,\n      deposit ? \"deposit\" : \"withdraw\",\n      value\n    );\n    setTx(receipt);\n    setValue(\"\")\n    triggerRefresh(!refresh);\n    setDisabled(false);\n  };\n\n  return (\n    <div className=\"StakeMenu\">\n      <div className=\"StakeMenu-Input-Container\">\n        <div className=\"StakeMenu-Input-Label\">Amount</div>\n        <div className=\"StakeMenu-Input\">\n          <input\n            className=\"StakeMenu-Input-Input\"\n            placeholder=\"0.0\"\n            value={value}\n            onChange={filterValue}\n          />\n          <div className=\"StakeMenu-Input-Token\">\n            <img src={logo} className=\"StakeMenu-Logo\" alt=\"cfx_logo\" />\n            CFX\n          </div>\n        </div>\n      </div>\n      <div className=\"StakeMenu-Current\">Currently Staked: {balance}</div>\n      <div className=\"StakeMenu-Button-Container\">\n        <button\n          className={`StakeMenu-Button Left ${deposit ? \"Active\" : \"Disabled\"}`}\n          onClick={() => setDeposit(!deposit)}\n        >\n          Deposit\n        </button>\n        <button\n          className={`StakeMenu-Button Right ${\n            deposit ? \"Disabled\" : \"Active\"\n          }`}\n          onClick={() => setDeposit(!deposit)}\n        >\n          Withdraw\n        </button>\n      </div>\n      <button\n        className=\"StakeMenu-Send\"\n        disabled={!(!disabled && connected.value)}\n        onClick={buttonClick}\n      >\n        Send Transaction\n      </button>\n    </div>\n  );\n};\n\nexport default StakeMenu;\n","import React from \"react\";\nimport \"./nav.css\";\n\nfunction Nav({ connected }) {\n  const [installed, setInstalled] = React.useState(false);\n  const [address, setAddress] = React.useState(\"\");\n\n  React.useEffect(() => {\n    if (!!window.conflux) {\n      setInstalled(true);\n    }\n  }, []);\n\n  const handleClick = async () => {\n    if (!installed) {\n      window.open(\"https://portal.conflux-chain.org/\");\n    } else {\n      try {\n        const account = await window.conflux.enable();\n        setAddress(account[0]);\n        connected.set(true);\n      } catch (e) {\n        console.log(\"Portal connection denied by user\");\n      }\n    }\n  };\n\n  return (\n    <div className=\"Nav\">\n      <button className=\"Nav-Button\" onClick={handleClick}>\n        <span\n          className={`${installed ? \"Nav-Button-Dot\" : \"\"} ${\n            !address ? \"Red\" : \"\"\n          }`}\n        />\n        <div className=\"Nav-Button-Text\">\n          {connected.value\n            ? address\n            : installed\n            ? \"Connect Portal\"\n            : \"Install Portal\"}\n        </div>\n      </button>\n    </div>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport \"./alert.css\";\n\nconst Alert = ({ chainID, tx }) => {\n  const [active, setActive] = React.useState({ warn: false, tx: false });\n\n  React.useEffect(() => {\n    setActive({ warn: Number(chainID) === 2, tx: false });\n  }, [chainID]);\n\n  React.useEffect(() => {\n    setActive({ warn: false, tx: !!tx });\n\n    setTimeout(\n      () =>\n        setActive((prev) => {\n          return { ...prev, tx: false };\n        }),\n      10000\n    );\n  }, [tx]);\n\n  const clear = () => {\n    setActive({ warn: false, tx: false });\n    console.log(\"here\");\n  };\n\n  return (\n    <div className=\"Alert-Container\">\n      {active.warn && (\n        <div className=\"Alert-Alert Warning\">\n          <div>Staking balance is unavailable on Oceanus</div>\n          <div class=\"close\" onClick={clear}>\n            &times;\n          </div>\n        </div>\n      )}\n      {active.tx && (\n        <div className=\"Alert-Alert Success\">\n          <a\n            href={`https://${\n              Number(window.conflux.networkVersion) === 1 ? \"testnet.\" : \"\"\n            }confluxscan.io/transactionsdetail/${tx}`}\n          >\n            View transaction on Confluxscan\n          </a>\n          <div class=\"close\" onClick={clear}>\n            &times;\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Alert;\n","import React from \"react\";\nimport StakeMenu from \"./stakeMenu/stakeMenu\";\nimport Nav from \"./nav/nav\";\nimport Alert from \"./alert/alert\";\nimport \"./App.css\";\n\nfunction App() {\n  const [value, set] = React.useState(false);\n  const [chainID, setChainID] = React.useState(1);\n  const connected = { value, set };\n  const [tx, setTx] = React.useState(undefined);\n\n  React.useEffect(() => {\n    if (!!window.conflux) {\n      window.conflux.on(\"networkChanged\", () => {\n        console.log(\"network change\");\n        setChainID(window.conflux.networkVersion);\n      });\n    }\n  }, [connected.value]);\n\n  return (\n    <div className=\"App\">\n      <Nav connected={connected} />\n      <StakeMenu connected={connected} setTx={setTx} chainID={chainID} />\n      <Alert chainID={chainID} tx={tx} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}